[[template]]
name = "jspm"
definition = """({ name, targets, deps, env, templateOptions: {
  autoInstall,
  env: generatorEnv = ['browser', 'production', 'module'],
  preload,
  integrity,
  whitespace,
  esModuleShims,
  ...generateOpts
} }) => [{
  name,
  targets,
  targetCheck: 'always-rebuild',
  deps: [...deps, 'node_modules/@jspm/generator', 'node_modules/mkdirp'],
  env,
  engine: 'node',
  run: `
    import { Generator } from '@jspm/generator';
    import { readFile, writeFile } from 'fs/promises';
    import { pathToFileURL } from 'url';
    import mkdirp from 'mkdirp';
    import { dirname, relative, resolve } from 'path';

    const importMapTarget = process.env.TARGET.endsWith('.importmap');

    const opts = ${JSON.stringify(generateOpts)};
    const htmlUrl = importMapTarget ? null : pathToFileURL(process.env.TARGET);

    if (opts.resolutions) {
      const newResolutions = {};
      // renormalize relative resolutions relative to cwd
      const cwd = process.cwd();
      for (const key of Object.keys(opts.resolutions)) {
        const target = opts.resolutions[key];
        if (!target.startsWith('./') && !target.startsWith('../')) {
          newResolutions[key] = target;
          continue;
        }
        const normalizedTarget = relative(dirname(resolve(cwd, process.env.TARGET)), resolve(cwd, target)).replace(/\\\\\\\\/g, '/');
        newResolutions[key] = normalizedTarget;
      }
      opts.resolutions = newResolutions;
    }

    const generator = new Generator({
      mapUrl: htmlUrl || import.meta.url,
      env: ${JSON.stringify(generatorEnv)},
      ...opts
    });

    if (importMapTarget) {
      let deps = [];
      let i = 0;
      while (++i) {
        const dep = process.env['DEP' + i];
        if (dep === 'node_modules/@jspm/generator' || dep === 'node_modules/mkdirp')
          continue;
        if (dep === undefined)
          break;
        deps.push(dep);
      }
      await Promise.all(deps.map(dep => generator.traceInstall('./' + dep)));
      await writeFile(process.env.TARGET, JSON.stringify(generator.getMap(), null, 2));
    }
    else {
      const htmlSource = await readFile(process.env.DEP, 'utf-8');
      const htmlOpts = ${JSON.stringify({ preload, integrity, whitespace, esModuleShims })};
      htmlOpts.htmlUrl = htmlUrl;
      const outHtml = await generator.htmlGenerate(htmlSource, htmlOpts);

      mkdirp.sync(dirname(process.env.TARGET));
      await writeFile(process.env.TARGET, outHtml);
    }
  `
}, {
  template: 'npm',
  templateOptions: {
    autoInstall,
    packages: ['@jspm/generator', 'mkdirp'],
    dev: true
  }
}]
"""
